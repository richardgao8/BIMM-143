---
title: "Class 13: RNASez analysis with DESeq2"
author: "Richard Gao (PID: A16490010)"
format: pdf
---

In today's class we will explore and analyze data frmo a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).


## Data Import

We have two input files, so-called "count data" and "col data".

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```


## Data Explore

```{r}
head(counts)
head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(counts)
```

> 2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
```


## Toy differential gene expression

Time to do some analysis.

We have 4 control and 4 treated samples/experiments/columns.

Make sure the metadata id column matches the columns in our countdata.

```{r}
colnames(counts) == metadata$id
```

To check that all elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T, T, T, F))
```

```{r}
all(colnames(counts) == metadata$id)
```

To start I will calculate the `control.mean` and `treated.mean` values and compare them.

- Identify and extract the `control` only columns
- Determine the mean value for each gene (i.e. row)
- Do the same for `treated`.


> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

apply

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
# Where does it tell me which columns are control?
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
control.mean <- apply(control.counts, 1, mean)

# Where does it tell me which columns are treated?
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ , treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```

Let's store these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following. Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

Have a quick view of this data:

```{r}
plot(meancounts)
```
Would use geom_point().

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

The data is screaming at us to log transform as it is so heavily skewed and over such a wide range.
```{r}
plot(meancounts, log="xy")
```


I want to compare the treated and the control values here and we will use fold change in log2 units to do this. log2(treated/control)

```{r}
log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
```

Why log2?
```{r}
# 0 indicates no change
log2(20/20)
# 1 indicates a doubling in the treated
log2(20/10)
# -1 indicates a halving in the treated
log2(5/10)
```

A common rule of thumb cut-off for calling a gene "differentially expressed" is a log2 fold-change value of either > +2 or < -2 for "up regulated" and "down regulated" respectively.

```{r}
head(meancounts)
```

We first need to remove zero count genes - as we can't say anything about these genes anyway and their division of log values are messing things up (divide by zero) or the -infinity log problem.
```{r}
to.rm.ind <- rowSums(meancounts[,1:2]==0) > 0
mycounts <- meancounts[!to.rm.ind, ]
```

> Q. How many genes do we have left that we can say something about (i.e. they don't have zero counts)?

```{r}
nrow(mycounts)
```

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the dataset both ways to see how many genes are up or down-regulated.
```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(up.ind)
```

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(down.ind)
```

> Q10. Do you trust these results? Why or why not?

No since we are comparing the fold change of means, which can be large without being statistically significant.


## DESez analysis

Let's do this properly with the help of the DESeq2 package

```{r}
#| message: false

library(DESeq2)
```

We have to use a specific data object for working with DESeq2

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

Run our main analysis with the `DESeq()` function
```{r}
dds <- DESeq(dds)
```

To get the results out of our `dds` object we can use the DESeq function called `results()`:
```{r}
res <- results(dds)
head(res)
```


## Volcano Plot

A very common and useful summary results figure from this type of analysis is called a volcano plot - a plot of log2FC vs P-value. We use the `padj` adjusted P-value for multiple testing.

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ res$log2FoldChange > 2 ]  <- "blue" 
mycols[ res$log2FoldChange < -2 ]  <- "blue" 
mycols[ res$padj > 0.05] <- "gray"

plot(res$log2FoldChange, -log(res$padj), 
     xlab = "Log2(FoldChange)", ylab = "-Log(P-value)",
     col = mycols)

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.05), col="gray", lty=2)
```


## Add Annotation Data

We will use one of Bioconductor’s main annotation packages to help with mapping between various ID schemes. Here we load the AnnotationDbi package and the annotation data package for humans org.Hs.eg.db.

```{r}
#head(res)
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),      # Our gene names
                     keytype="ENSEMBL",        # The format of our gene names
                     column="SYMBOL",          # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

I also want entrez IDs

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),      # Our gene names
                     keytype="ENSEMBL",        # The format of our gene names
                     column="ENTREZID",        # The new format we want to add
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),      # Our gene names
                     keytype="ENSEMBL",        # The format of our gene names
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")

head(res)
```


## Pathway Analysis

Now that I have added the necessary annotation data I can talk to different databases that use these IDs

We will use the `gage` package to do geneset analysis (a.k.a. pathway analysis, geneset enrichment, overlap analysis)

```{r}
library(pathview)
library(gage)
library(gageData)
```

We will use KEGG first ()
```{r}
data(kegg.sets.hs)    #Shows entrezIDs

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

```{r}
foldchange <- res$log2FoldChange
names(foldchange) <- res$entrez
head(foldchange)
```

```{r}
# Get the results
keggres = gage(foldchange, gsets=kegg.sets.hs)
```

Let's look at what's in our results ehre

```{r}
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

I can now use the returned pathway IDs from KEGG as input to the `pathview` package to make pathway figures with our DEGs (differentially expressed gene) highlighted.

```{r}
pathview(gene.data=foldchange, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)









