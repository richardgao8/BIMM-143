---
title: "Class 6: R Functions"
author: "Richard Gao (PID: A16490010)"
date: 01/25/24
format: pdf
---

## R Functions

Functions are how we get stuff done. We call functions to do everything useful in R.

One cool thing about R is that it makes writing your own functions comparatively easy.

All functions in R have at least three things:

-   A **name** (we get to pick this)
-   One or more **input arguments** (the input to our function)
-   The **body** (lines of code that do the work)

```{r}
#| eval: false

funname <- function(input 1, input 2) {
  # The body with R code
}
```

Let's write a silly first function to add two numbers:
```{r}
x <- 5
y <- 1
x + y
```

```{r}
addme <- function(x, y=1) {
  x + y
}
```

```{r}
addme(1, 1)
```

```{r}
addme(100, 100)
```

```{r}
addme(10)
```

## Lab for Today

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Test functions.
```{r}
is.na(student3)
which.min(student1)
mean(student3, na.rm = TRUE)
cor(student2, student3)
```

Test na.rm.
```{r}
mean(student1, na.rm = TRUE)
mean(student2, na.rm = TRUE)
mean(student3, na.rm = TRUE)
```
This is not fair - there is no way student3 should have a mean of 90.
We want to drop the lowest score before getting the `mean()`

How do I find the lowest score?
```{r}
min(student1) 
```

But I need the location of the lowest score.
```{r}
which.min(student1)
```

Cool - it is the eighth position but how do I remove that from the vector of grades?
```{r}
removedLowest <- student1[-which.min(student1)]
removedLowest
```

Now find the mean of the dropped vector.
```{r}
ind <- which.min(student1)
mean(student1[-ind])
```

Use a common shortcut and use `x` as my input

```{r}
x <- student1
mean(x[-which.min(x)])
```

We still have the problem of missing values. Replace NA values with 0.

```{r}
is.na(student3)
student3[is.na(student3)] = 0
student3
```

How can I remove the NA elements from the vector?

```{r}
!c(F, F, F)
```
```{r}
y <- c(1, 2, NA, 4, 5)
y[!is.na(y)]
```

Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput”

```{r}
grade <- function(student) {
  # Change NA values to Zero
  student[is.na(student)] = 0
  # Find and drops min value and calculates mean
  mean(student[-which.min(student)])
}
```

Test the grade function.

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Now read the online gradebook(CSV file)
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)

head(gradebook)
```

Now apply the grade function to the CSV gradebook.
```{r}
# 1 indicates rows and 2 indicates columns
results <- apply(gradebook, 1, grade)
results
```

Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(results)
max(results)
```

From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall)?
```{r}
AvgHW <- apply(gradebook, 2, mean, na.rm=T)
AvgHW
which.min(AvgHW)
```
Different because one student in HW3 had a very low score that pulled the HW3 average down.
```{r}
AvgHW <- apply(gradebook, 2, sum, na.rm=T)
AvgHW
which.min(AvgHW)
```

Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?
```{r}
# Make all NA values 0
mask <- gradebook
mask[is.na(mask)] = 0
mask
```

We can use the `cor()` function for correlation analysis.

```{r}
cor(mask$hw5, results)
cor(mask$hw3, results)
```

Try to apply to gradebook:
```{r}
apply(mask, 2, cor, results)
```