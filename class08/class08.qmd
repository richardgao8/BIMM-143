---
title: "Class 8: Breast Cancer Mini Project"
author: "Richard Gao (PID: A16490010"
format: pdf
---
Before we get stuck into project work we will have a quick look at applying PCA to some example RNASez data (tail end of lab 7)

Read the data (detailed in lab 7)
```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q. How many genes are in this dataset?

```{r}
nrow(rna.data)
```

## Run PCA

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

```{r}
pca$x
```
```{r}
# We have 5 wt and 5 ko samples
mycols <- c(rep("blue", 5), rep("red", 5))
mycols

plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", col=mycols)
```

I could examine which genes contribute most to this first PC

```{r}
head(sort(abs(pca$rotation[,1]), decreasing = T))
```

Download and import data to save as data frame

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
# read.csv works because the file is in the project folder

head(wisc.df)
```

Note that the first column here wisc.df$diagnosis is a pathologist provided expert diagnosis. We will not be using this for our unsupervised analysis as it is essentially the “answer” to the question which cell samples are malignant or benign.

To make sure we don’t accidentally include this in our analysis, lets create a new data.frame that omits this first column

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
head(wisc.data)
```

Finally, setup a separate new vector called diagnosis that contains the data from the diagnosis column of the original dataset. We will store this as a factor (useful for plotting) and use this later to check our results.

```{r}
# Create diagnosis vector for later 
diagnosis <- as.factor(wisc.df$diagnosis)
```

> How many patients?

```{r}
nrow(wisc.data)
```


> Q1. How many observations are in this dataset?

```{r}
ncol(wisc.data)
```
- 30

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```
- 212

> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.data)
# output the positions and names in the character vector where matches are
grep("_mean", colnames(wisc.data), value=T)
length(grep("_mean", colnames(wisc.data), value = F))
```
- 10

## Principal Component Analysis

Here we will use `prcomp()` on the `wisc.data` object - the one without the diagnosis column.

First, we have to decide whether to use the `scale=TRUE` argument when we run `prcomp`

We can look at the means and sd of each column. If they are similar then we are all good to go. If not, we should use `scale=TRUE`

```{r}
colMeans(wisc.data)
```

```{r}
apply(wisc.data,2,sd)
```

These are very different so we should scale=TRUE.

```{r}
wisc.pr <- prcomp(wisc.data, scale=T)
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27%

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs capture 72.6% of the original variance.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs capture 91.01% of the original variance.


## Plotting the PCA results

```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

It is a mess of data with words, numbers, and lines overcrowding each other so it can't be interpreted.

We need to make our own plot.

```{r}
attributes(wisc.pr)
```

```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Scatter plot observations by components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col=diagnosis)
```


```{r}
library(ggplot2)

pc <- as.data.frame(wisc.pr$x)

ggplot(pc) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point()
```

### Communicating PCA results

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean", 1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
tbl <- summary(wisc.pr)
which(tbl$importance[3,] > 0.8)[1]
```
- 5

## 3. Hierarchical clustering

The main function for hierarchical clustering is called `hclust()` it takes a distance matrix as input.

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
data.dist <- dist(data.scaled)
wisc.hclust <- hclust(data.dist)
plot(wisc.hclust)
```

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=20, col="red")
grps <- cutree(wisc.hclust, h=20)
table(grps)
```
-20

Come back here later to see how our cluster grps correspond to M or B groups.



## 5. Combining methods

Here we will perform clustering on our PCA results rather than the original data.

In other words, we will cluster using `wisc.pr$x` - our new better variables or PCs. We can choose as many or as few PCs to use as we wish.

```{r}
d.pc <- dist(wisc.pr$x[, 1:3])

wisc.pr.hclust <- hclust( d.pc, method = "ward.D2")
plot(wisc.pr.hclust)
abline(h=80, col="purple")
```

```{r}
grps <- cutree(wisc.pr.hclust, h=80)
table(grps)
```

We can use `table()` function to make a cross-table as wellas just a count table.

```{r}
table(diagnosis)
```

```{r}
table(grps, diagnosis)
```

Write a note here about how to read this cross-table result.
The results indicate that our cluster 1 mostly captures cancer (M) individuals and are cluster 2 mostly captures healthy (B) individuals.


## 7. Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

Now plot this up.

```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```
> Q18. Which of these new patients should we prioritize for follow up based on your results?

The patients that are diagnosed as B but are near cluster 1.
